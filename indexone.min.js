var filterImage = './filterImageOne.png',
  fallbackImage = './fallbackone.png',
  sizeToUse = 570,
  fontSizeToUse = 11,
  textYMultiplier = 2.6
function calcSize() {
  ;(window.innerWidth < 590) & (window.innerWidth > 400)
    ? ((sizeToUse = 400), (fontSizeToUse -= 4), (textYMultiplier = 2.75))
    : window.innerWidth <= 400 &&
      ((sizeToUse = 360), (fontSizeToUse -= 4), (textYMultiplier = 2.75))
}
calcSize()
var config = {
  width: sizeToUse,
  height: sizeToUse,
  fontFamily: 'Fjalla One',
  initialText: 'Enter your text below.',
  maxCharLength: 45,
  textColor: 'white',
  initialfontSize: fontSizeToUse,
  fontStyle: 'bold',
  website: location.pathname.split('/')[1],
  fallbackOverlayPath: filterImage,
  saveFileName: 'MyBadAssMoment'
}
function _loadFont(e) {
  var t = document.createElement('canvas')
  ;(t.width = 16), (t.height = 16)
  var o = t.getContext('2d')
  ;(o.font = '4px ' + e), o.fillText('text', 0, 8)
}
_loadFont(config.fontFamily)
var website = location.pathname.split('/')[1],
  fallbackOverlayPath = filterImage || fallbackImage,
  isMobile = !1
isMobile = !!(
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini|Mobile/i.test(
    navigator.userAgent
  ) && window.screen.width <= 768
)
var img,
  gImg,
  width = config.width,
  height = config.height,
  editable = !0,
  savedgImgpos = {},
  savedInputTextPos = {},
  textAreaActive = !1,
  loadingScreen = document.querySelector('.loading-screen'),
  showOnLoad = document.querySelectorAll('.hide-til-load'),
  showOnUpload = document.querySelectorAll('.hide-til-upload'),
  hideOnUpload = document.querySelectorAll('.hide-on-upload'),
  disabledTilUpload = document.querySelectorAll('.disabled-til-upload'),
  resizeButton = document.querySelector('#resize'),
  containBottom = document.querySelector('.contain-bottom'),
  bottomTray = document.querySelector('.bottom-tray'),
  editOptions = document.querySelector('.edit-options'),
  shareOptions = document.querySelector('.share-options'),
  buttonContainer = document.querySelector('.button-container'),
  shareButton = document.querySelector('#share-image'),
  downloadButton = document.querySelector('.download-button'),
  shareBox = document.querySelector('#share-box'),
  shareHolder = document.querySelector('.share-holder'),
  facebookShare = document.querySelector('#facebook-share'),
  twitterShare = document.querySelector('#twitter-share'),
  imagePath = 'https://andrewgillum.com',
  buttonWrap = document.querySelector('.wrap-buttons'),
  editButton = document.querySelector('#edit-image'),
  editToolHolder = document.querySelector('.edit-tool-holder'),
  scaleToggle = document.querySelector('.scale-toggle'),
  scaleSlider = document.querySelector('#scale'),
  scaleNum = document.querySelector('#scale-num'),
  scaleTools = document.querySelector('#scale-slider-row'),
  rotateToggle = document.querySelector('.rotate-toggle'),
  rotateSlider = document.querySelector('#rotate'),
  rotateNum = document.querySelector('#rotate-num'),
  rotateTools = document.querySelector('#rotate-slider-row'),
  textToggle = document.querySelector('.text-toggle'),
  textEditRow = document.querySelector('.text-edit-row'),
  textContent = document.querySelector('#text'),
  textCounter = document.querySelector('#text-count')
textCounter.innerHTML = config.initialText.length + '/' + config.maxCharLength
var imageToggle = document.querySelector('#edit-image'),
  imageTools = document.querySelector('.image-tools'),
  fontSizeDec = config.initialfontSize,
  fontSizePx = config.initialfontSize,
  stage = new Konva.Stage({
    container: 'container',
    width: width,
    height: height
  }),
  uploadButtonBox = document.querySelector('.upload-button-center-box')
function calculateAspectRatioFit(e, t, o, a) {
  var i = Math.min(o / e, a / t)
  return { width: e * i, height: t * i }
}
var inputText,
  group = new Konva.Group({
    clip: {
      x: stage.getWidth() / 4,
      y: stage.getHeight() / 4,
      width: width / 2,
      height: height / 2
    },
    draggable: !1,
    centeredScaling: !0
  }),
  layer = new Konva.Layer()
function initInputText() {
  ;(inputText = new Konva.Text({
    y: stage.getHeight() / textYMultiplier,
    x: stage.getWidth() / 3.7,
    width: stage.getWidth() / 5,
    text: config.initialText,
    fontSize: fontSizePx,
    fontFamily: config.fontFamily,
    fontStyle: config.fontStyle,
    shadowColor: 'black',
    shadowOffset: { x: -1, y: 1 },
    shadowBlur: 2,
    shadowOpacity: 0.4,
    fill: config.textColor,
    centeredScaling: !0,
    align: 'center',
    listening: !1,
    wrap: 'word'
  })),
    group.add(inputText),
    inputText.setZIndex(999),
    (savedInputTextPos = inputText.position()),
    group.draw(),
    layer.draw()
}
var lastTextLength = 0
async function drawImage(e) {
  gImg && gImg.destroy()
  var t = await calculateAspectRatioFit(
    e.width,
    e.height,
    width / 2,
    height / 2
  )
  ;(gImg = new Konva.Image({
    image: e,
    x: stage.getWidth() / 4,
    y: stage.getHeight() / 4,
    width: t.width,
    height: t.height,
    offsetX: t.width / 2,
    offsetY: t.height / 2,
    name: 'userImg',
    draggable: !0,
    centeredScaling: !0,
    listening: !0
  })).on('mouseover', function() {
    document.body.style.cursor = 'pointer'
  }),
    gImg.on('mouseout', function() {
      document.body.style.cursor = 'default'
    }),
    group.add(gImg),
    gImg.setZIndex(-2),
    group.draw(),
    layer.draw(),
    (savedgImgpos = gImg.position())
}
;(overlayImg = new Image()),
  (overlayImg.onload = function() {
    ;(overlay = new Konva.Image({
      image: overlayImg,
      x: stage.getWidth() / 4,
      y: stage.getHeight() / 4,
      width: width / 2,
      height: height / 2,
      listening: !1,
      centeredScaling: !0
    })),
      group.add(overlay),
      (grown = !0),
      group.scale({ x: 2, y: 2 }),
      overlay.position({ x: 0, y: 0 }),
      group.setClip({
        x: 0,
        y: 0,
        width: stage.getWidth(),
        height: stage.getHeight()
      }),
      overlay.setZIndex(-1),
      layer.add(group),
      stage.add(layer)
    for (var e = 0; e < showOnLoad.length; e++)
      showOnLoad[e].style.opacity = '1'
    ;(loadingScreen.style.display = 'none'), initInputText()
  }),
  (overlayImg.src = config.fallbackOverlayPath),
  overlayImg.setAttribute('crossOrigin', 'anonymous')
var imageSelector = document.querySelector('#selectedImage')
function downloadURI(e, t) {
  var o = document.createElement('a')
  ;(o.download = t),
    (o.href = e),
    document.body.appendChild(o),
    o.click(),
    document.body.removeChild(o),
    delete o
}
function downloadImage() {
  ;(editable = !1),
    gImg.draggable(!1),
    gImg.off('mouseover', function() {
      document.body.style.cursor = 'pointer'
    }),
    gImg.off('mouseout', function() {
      document.body.style.cursor = 'default'
    })
  stage.setWidth(1200),
    stage.setHeight(1200),
    stage.scale({ x: 1200 / config.width, y: 1200 / config.height }),
    layer.draw(),
    downloadURI(stage.toDataURL(), config.saveFileName + '.png'),
    stage.setWidth(config.width),
    stage.setHeight(config.height),
    stage.scale({ x: 1, y: 1 }),
    layer.draw()
}
imageSelector.addEventListener('change', function(e) {
  img = new Image()
  var t = window.URL.createObjectURL(e.target.files[0])
  ;(img.src = t),
    img.setAttribute('crossOrigin', 'anonymous'),
    (img.onload = async function() {
      for (var e = 0; e < showOnUpload.length; e++)
        (showOnUpload[e].style.opacity = '1'),
          showOnUpload[e].classList.contains('full-hide-flex') &&
            (showOnUpload[e].style.display = 'flex'),
          showOnUpload[e].classList.remove('hide-til-upload'),
          document.querySelector('.edit-row').classList.add('active'),
          document.querySelector('.edit-row').classList.remove('invis')
      for (e = 0; e < disabledTilUpload.length; e++)
        disabledTilUpload[e].classList.remove('disabled-til-upload')
      for (e = 0; e < hideOnUpload.length; e++)
        hideOnUpload[e].style.display = 'none'
      document.getElementById('gn-upload').classList.remove('fa-upload'),
        document
          .getElementById('gn-upload')
          .classList.add('fa-images', 'active'),
        (document.getElementById('gn-uploadtext').innerHTML = 'Edit Image'),
        (uploadButtonBox.style.display = 'none'),
        imageSelector.setAttribute('disabled', ''),
        showBottomTray(),
        toggleTool('text'),
        showBottomTray('edit'),
        allowButtons(),
        await drawImage(this)
    })
})
var initialTextareaPosY,
  bottomTrayMode = 'hidden'
function allowButtons() {
  editButton.classList.remove('disabled'),
    downloadButton.classList.remove('disabled')
}
function showBottomTray(e) {
  switch (e) {
    case 'edit':
      ;(bottomTrayMode = 'edit'),
        shareOptions.classList.remove('active'),
        editOptions.classList.add('active')
      break
    case 'share':
      hideToolHolder(),
        (bottomTrayMode = 'share'),
        editOptions.classList.remove('active'),
        shareOptions.classList.add('active')
  }
  bottomTray.classList.add('active')
}
function hideBottomTray() {
  hideToolHolder(),
    bottomTray.classList.remove('active'),
    (bottomTrayMode = 'hidden')
}
function showToolHolder() {
  buttonWrap.classList.add('move-down'), editToolHolder.classList.add('active')
}
function hideToolHolder() {
  buttonWrap.classList.remove('move-down'),
    editToolHolder.classList.remove('active')
}
function hideAllTools() {
  hideToolHolder(),
    (rotateTools.style.display = 'none'),
    (scaleTools.style.display = 'none')
}
function toggleTool(e) {
  switch (e) {
    case 'scale':
      ;(scaleTools.style.display = 'flex'),
        (rotateTools.style.display = 'none'),
        (textEditRow.style.display = 'none'),
        showToolHolder()
      break
    case 'rotate':
      ;(rotateTools.style.display = 'flex'),
        (textEditRow.style.display = 'none'),
        (scaleTools.style.display = 'none'),
        showToolHolder()
      break
    case 'text':
      ;(textEditRow.style.display = 'flex'),
        (scaleTools.style.display = 'none'),
        (rotateTools.style.display = 'none'),
        textContent.focus(),
        showToolHolder()
  }
}
function calcOffset(e) {
  inputText.offsetY(inputText.getHeight() / 1.59)
}
function changeText(e, t) {
  t.length <= config.maxCharLength
    ? (inputText.text(t), calcOffset(e), layer.draw())
    : (e.value = inputText.text())
}
editButton.addEventListener('click', function() {
  'edit' != bottomTrayMode
    ? showBottomTray('edit')
    : 'edit' == bottomTrayMode && hideBottomTray()
}),
  downloadButton.addEventListener('click', function() {
    downloadImage()
  }),
  scaleToggle.addEventListener('click', function() {
    toggleTool('scale')
  }),
  scaleSlider.addEventListener('input', function(e) {
    ;(scaleNum.value = e.target.value),
      gImg.scale({ x: e.target.value, y: e.target.value }),
      layer.draw()
  }),
  scaleNum.addEventListener('input', function(e) {
    ;(scaleSlider.value = e.target.value),
      gImg.scale({ x: e.target.value, y: e.target.value }),
      layer.draw()
  }),
  rotateToggle.addEventListener('click', function() {
    toggleTool('rotate')
  }),
  rotateSlider.addEventListener('input', function(e) {
    ;(rotateNum.value = e.target.value),
      gImg.rotation(e.target.value),
      layer.draw()
  }),
  rotateNum.addEventListener('input', function(e) {
    ;(rotateSlider.value = e.target.value),
      gImg.rotation(e.target.value),
      layer.draw()
  }),
  textToggle.addEventListener('click', function() {
    toggleTool('text')
  }),
  textContent.addEventListener('input', function(e) {
    changeText(e.currentTarget, e.currentTarget.value),
      (textCounter.innerHTML =
        e.currentTarget.value.length + '/' + config.maxCharLength),
      layer.draw()
  })
var notFirstClick = !1
document.querySelector('#gn-upload').addEventListener('click', function() {
  notFirstClick ? this.classList.toggle('active') : (notFirstClick = !0)
})
